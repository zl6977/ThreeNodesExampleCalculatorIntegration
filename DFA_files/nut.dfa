#! NX/KF 10.0
DefClass: nut_zzz (ug_base_part);

(number parameter) diameter: 0.25;             #!!! input from template

(number parameter) head_thickness: nth(getIndex:(diameter_list:, diameter:), head_thickness_list:);
(number parameter) width_across_flats: nth(getIndex:(diameter_list:, diameter:), width_across_flats_list:);
(number parameter) head_dimension: width_across_flats:/tan(60);
(number parameter) threads_per_inch: nth(getIndex:(diameter_list:, diameter:), threads_per_inch_list:);
(number parameter) pitch: 1/threads_per_inch:;

#thread related
(number parameter) threads_per_inch: nth(getIndex:(diameter_list:, diameter:), threads_per_inch_list:);
(number parameter) pitch: 1/threads_per_inch:;
(number parameter) turn: head_thickness:/pitch:; 
(integer parameter) num_point_total: round(100*turn:);
(vector parameter) direction: vector(0,0,1);
(point parameter) start_point: point(0,0,0);
(number parameter) turn_extra: 0.5;
(number parameter) cut_depth: pitch:*sin(60)-pitch:/8*sin(60);

(list parameter)    diameter_list: {0.25, 0.3125, 0.375, 0.4375, 0.5, 0.625, 0.75, 0.875, 1};
(list parameter)    threads_per_inch_list: {20, 18, 16, 14, 13, 11, 10, 9, 8};
(list parameter)    width_across_flats_list: {7/16, 1/2, 9/16, 5/8, 3/4, 15/16, 9/8, 21/16, 3/2};
(list parameter)    head_thickness_list: {0.226, 0.273, 0.337, 0.385, 0.448, 0.559, 0.665, 0.776, 0.887};

(Child) spanner: 
{ 
    Class, ug_extruded; 
    Start_Limit, 0; 
    End_Limit, head_thickness:; 
    Direction, direction:; 
    profile, sec_spanner:;
#   profile, {nth(1, sec_spanner:), nth(2, sec_spanner:), nth(3, sec_spanner:), nth(4, sec_spanner:), nth(5, sec_spanner:), nth(6, sec_spanner:)};
};

(Child list) sec_spanner: 
{ 
    Class, ug_line; 
    quantity, 6;
    Start_Point, point(head_dimension: * cos(60*(child:index:-1)), head_dimension: * sin(60*(child:index:-1)), 0) + (start_point: - point(0,0,0)); 
    End_Point, point(head_dimension: * cos(60*child:index:), head_dimension: * sin(60*child:index:), 0) + (start_point: - point(0,0,0)); 
};

(Child) cylinder: {
    Class,  ug_cylinder,
    Origin, start_point:;
    Diameter, diameter:;
    Direction, direction:;
    Height, head_thickness:;
    Operation, Subtract;
    target, {spanner:};
};

(list) ex_points_zzz: loop
{
    for $n from 0 to num_point_total: -1;
    for $delta_theta is 360*(turn: + turn_extra:) / (num_point_total: -1);          # extra for starting end of the substraction, or the cylinder disappears
    for $delta_z is (length_thread: + turn_extra:* pitch:)/ (num_point_total: -1);  # extra for the starting end of the thread
    for $pt is Point(diameter:/2 *cos($n*$delta_theta), diameter:/2 *sin($n*$delta_theta), -turn_extra:* pitch: +$n*$delta_z) + (start_point: - point(0,0,0));
#    do printValue($pt);
    collect {$pt};
};

(Child) ex_spline_cntl: {
    Class,          ug_spline_cntl,
    Points,         ex_points_zzz:     
};

(child) line1: { 
    Class, ug_line; 
    Start_Point,    point(diameter:/2 - pitch:/4*sin(60), 0, pitch:/8) + vector(cut_depth:, 0, -turn_extra:*pitch:) + (start_point: - point(0,0,0)); 
    End_Point,      point(diameter:/2 - pitch:/4*sin(60), 0, -pitch:/8) + vector(cut_depth:,0, -turn_extra:*pitch:) + (start_point: - point(0,0,0)); 
};

(child) line2: { 
    Class, ug_line; 
    Start_Point,    point(diameter:/2 - pitch:/4*sin(60), 0, -pitch:/8) + vector(cut_depth:,0, -turn_extra:*pitch:) + (start_point: - point(0,0,0)); 
    End_Point,      point(diameter:/2 - pitch:*sin(60), 0, -pitch:/2) + vector(cut_depth:,0, -turn_extra:*pitch:) + (start_point: - point(0,0,0)); 
};

(child) line3: { 
    Class, ug_line; 
    Start_Point,    point(diameter:/2 - pitch:*sin(60), 0, -pitch:/2) + vector(cut_depth:,0, -turn_extra:*pitch:) + (start_point: - point(0,0,0)); 
    End_Point,      point(diameter:/2 - pitch:*sin(60), 0, pitch:/2) + vector(cut_depth:,0, -turn_extra:*pitch:) + (start_point: - point(0,0,0)); 
};

(child) line4: { 
    Class, ug_line; 
    Start_Point,    point(diameter:/2 - pitch:*sin(60), 0, pitch:/2) + vector(cut_depth:,0, -turn_extra:*pitch:) + (start_point: - point(0,0,0)); 
    End_Point,      point(diameter:/2 - pitch:/4*sin(60), 0, pitch:/8) + vector(cut_depth:,0, -turn_extra:*pitch:) + (start_point: - point(0,0,0)); 
};

(child) thread_profile: {
  Class, ug_curve_join;
  profile, {line1:, line2:, line3:, line4:};
  Suppress_Children?, true;
};

(child) threads: {
  class, ug_swept;
  guide, {{forward, ex_spline_cntl:}};
  section, {{forward, thread_profile:}};
  scaling, {scale_constant, 1};
  alignment_init, Parameter;
  orientation, {Orientation_Vector , direction:};
  Body_Type, Solid;
  
  tolerances, {0.01*diameter:, 0, 0};
  Operation, Subtract;
  target, {spanner:};
};