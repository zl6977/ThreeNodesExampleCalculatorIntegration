#! NX/KF 10.0
DefClass: lag_screw_zzz (ug_base_part);

(number parameter) height_top: 4;
(number parameter) diameter_top: 10;

(number parameter) head_thickness: 4;
(number parameter) head_dimension: 8/1.732;

(number parameter) diameter: 5;
(number parameter) length_cylinder: 30;
(number parameter) length_thread: 20;
(number parameter) height_wedge: 5;
(vector parameter) direction: vector(0,0,1);
(point parameter) start_point: point(0,0,0);

(number parameter) pitch: length_cylinder:/24;
(number parameter) turn: length_thread:/pitch:;
(integer parameter) num_point_total: round(100*turn:);

(Child) spanner: 
{ 
    Class, ug_extruded; 
    Start_Limit, 0; 
    End_Limit, head_thickness:; 
    Direction, direction:; 
    profile, sec_spanner:;
};

(Child list) sec_spanner: 
{ 
    Class, ug_line; 
    quantity, 6;
    Start_Point, point(head_dimension: * cos(60*(child:index:-1)), head_dimension: * sin(60*(child:index:-1)), length_cylinder: + height_wedge:)+(start_point: - point(0,0,0)); 
    End_Point, point(head_dimension: * cos(60*child:index:), head_dimension: * sin(60*child:index:), length_cylinder: + height_wedge:)+(start_point: - point(0,0,0)); 
};

(Child) cylinder: {
    Class,  ug_cylinder;
    Origin, point(0, 0, height_wedge:) + (start_point: - point(0,0,0));
    Diameter, diameter:;
    Direction, direction:;
    Height, length_cylinder:;
};

(Child) wedge: 
{ 
    Class, ug_cone; 
    Base_Diameter, 0.01*diameter:; 
    Top_Diameter, diameter:; 
    Direction, direction:; 
    Height, height_wedge:;
    Origin, start_point:;
};

#(list) ex_points_zzz: loop
#{
#  for $n from 0 to num_point_total: -1;
#    for $delta_theta is (360*turn:) / (num_point_total: -1);
#    for $delta_z is (length_thread: )/ (num_point_total: -1); # +1 for the staring end of the thread
#    for $pt is Point(diameter:/2 *cos($n*$delta_theta), diameter:/2 *sin($n*$delta_theta), height_wedge:+$n*$delta_z)+ (start_point: - point(0,0,0));
##    do printValue($pt);
#    collect {$pt};
#};
#
#(Child) ex_spline_cntl: {
#    Class,          ug_spline_cntl;
#    Points,         ex_points_zzz:;
#};
#
#(child) line1: { 
#    Class, ug_line; 
#    Start_Point, point(diameter:/2-pitch:/2*1.732,0,0)+vector(0,0,height_wedge:-2.5) + (start_point: - point(0,0,0)); 
#    End_Point, point(diameter:/2+1.732, 0, pitch:/2+1)+vector(0,0,height_wedge:-2.5) + (start_point: - point(0,0,0));  
#};
#
#(child) line2: { 
#    Class, ug_line; 
#    Start_Point, point(diameter:/2+1.732, 0, pitch:/2+1)+vector(0,0,height_wedge:-2.5)+ (start_point: - point(0,0,0)); 
#    End_Point, point(diameter:/2+1.732, 0, -pitch:/2-1)+vector(0,0,height_wedge:-2.5) + (start_point: - point(0,0,0));  
#};
#
#(child) line3: { 
#    Class, ug_line; 
#    Start_Point, point(diameter:/2+1.732, 0, -pitch:/2-1)+vector(0,0,height_wedge:-2.5) + (start_point: - point(0,0,0)); 
#    End_Point, point(diameter:/2-pitch:/2*1.732,0,0)+vector(0,0,height_wedge:-2.5) + (start_point: - point(0,0,0)); 
#};
#
#(child) thread_profile: {
#    Class, ug_curve_join;
#    profile, {line1:, line2:, line3:};
#    #join_method, POLYNOMIAL;
#    Suppress_Children?, true;
#};
#
#(child) threads: {
#    class, ug_swept;
#    guide, {{forward, ex_spline_cntl:}};
#    section, {{forward, thread_profile:}};
#    scaling, {scale_constant, 1};
#    alignment_init, Parameter;
#    orientation, {Orientation_Vector , direction:};
#    Body_Type, Solid;
#
#    tolerances, {0, 0, 0};
#    Operation, Subtract;
#    target, {cylinder:};
#};
#
#(child) threads1: {
#    class, ug_swept;
#    guide, {{forward, ex_spline_cntl:}};
#    section, {{forward, thread_profile:}};
#    scaling, {scale_constant, 1};
#    alignment_init, Parameter;
#    orientation, {Orientation_Vector , direction:};
#    Body_Type, Solid;
#
#    tolerances, {0, 0, 0};
#    Operation, Subtract;
#    target, {wedge:};
#};